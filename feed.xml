<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bovard's List</title>
    <atom:link href="http://bovard.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://bovard.github.io</link>
    <description>Projects I've (nearly) finished.</description>
    <pubDate>Fri, 01 Feb 2013 15:00:00 -0700</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>BattleCode 2013</title>
      <link>http://bovard.github.io/articles/battle_code_2013/</link>
      <pubDate>Fri, 01 Feb 2013 15:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://bovard.github.io/articles/battle_code_2013/</guid>
      <author></author>
      <description>&lt;p&gt;In which we win great victories.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://battlecode.org/&quot;&gt;Battle Code&lt;/a&gt; is a yearly competition hosted by MIT.
Competitors design an AI to control robots to lead them to battle on the virtual battlefield!
Each robot is running on a separate thread so communication between bots is limited.&lt;/p&gt;
&lt;p&gt;After not getting around to writing an entry for 2012 I was a bit ambivalent about
participating in 2013 but after it was clear that I had a good team that was actually
going to contribute, I was in!&lt;/p&gt;
&lt;p&gt;This year’s challenge involved a rock, paper, scissors-like strategies: nuke, rush and econ.
Each player started out with a base that could spend time doing one of two things: spawning
soldiers (took 8 turns) or doing research (anywhere from 100 - 400 turns). Every soldier was the same and they could find special
‘encampment’ squares and transform themselves into one of the encampment types
(artillery, generators, power supply, med base or shield). The game ended when your soldiers
destroyed the enemy hq or you were able to research nuke (took about 400 rounds).&lt;/p&gt;
&lt;p&gt;The rush strategy was basically that, rushing your soldiers over to the enemy hq! The two bases were separated
by at least 50 rounds (or so) of navigation. Which meant that you could spawn a soldier
and by the timeit got to the enemy base it would be 2v1. That’s assuming that the
enemy didn’t spawn any encampments (which is usually a good bet that they did). The rush
was incredibly powerful in the first week due in part to its lower barrier of entry
and limited scope.&lt;/p&gt;
&lt;p&gt;The nuke strategy was also pretty straight-forward: build a nuke. There was a lot of subtle
variations on this: how many soldiers should I build? should I only build if there
is an artillery spot near my base? only if I’m in a corner? etc…&lt;/p&gt;
&lt;p&gt;Finally there was the econ strategy. For every generator and power supply you built you were able
to build soldiers faster and support more soldiers (respectively). In the econ strat
you invested to varying degrees in econ in hope of overwhelming the enemy late-game.&lt;/p&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;p&gt;For our main logic structure for the bots we used something called a decision tree.
Basically we created a tree structure in which every node had a pre/post condition and
an action. Additionally there were selector nodes, which would select a child action
to run based on the environment. The loop ran something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;observe_environment()
choose_action_from_tree()
execute_action()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allowed up to build up several different trees to rapidly build out different
soldier roles that could be easily composed and switched. Here’s a list of the more interesting
roles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Backdoor soldier (run around the edges of the map to attack from behind)&lt;/li&gt;
&lt;li&gt;Encampment hunter (checks enemy encampment spots while avoiding combat)&lt;/li&gt;
&lt;li&gt;Miner (laid mines around the base)&lt;/li&gt;
&lt;li&gt;Defender (defended the hq)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/bovard/BC2013&quot;&gt;code&lt;/a&gt; on my github.&lt;/p&gt;
&lt;h4 id=&quot;results&quot;&gt;Results&lt;/h4&gt;
&lt;p&gt;We ended up going to the finals at MIT! but lost out (0-2) while there giving us
somewhere in 9th-16th place.&lt;/p&gt;
&lt;h6 id=&quot;written-05-05-2014&quot;&gt;Written 05/05/2014&lt;/h6&gt;
</description>
    </item>
    <item>
      <title>BattleCode 2011</title>
      <link>http://bovard.github.io/articles/battle_code_2011/</link>
      <pubDate>Sat, 05 Feb 2011 15:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://bovard.github.io/articles/battle_code_2011/</guid>
      <author></author>
      <description>&lt;p&gt;In which I abuse inheritance. Heavily.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://battlecode.org/&quot;&gt;Battle Code&lt;/a&gt; is a yearly competition hosted by MIT.
Competitors design an AI to control robots to lead them to battle on the virtual battlefield!
Each robot is running on a separate thread so communication between bots is limited.&lt;/p&gt;
&lt;p&gt;Fresh from my win in the Google AI Challenge, I recruited a team from there to head over
and do Battle Code. Unfortunately none of them wrote a line of code.
This dampened my spirits but I was ready to push forward!&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;http://bovard.github.io/articles/battle_code_2011/flying2.png&quot; alt=&quot;Flying&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://bovard.github.io/articles/battle_code_2011/light1.png&quot; alt=&quot;Light&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://bovard.github.io/articles/battle_code_2011/medium2.png&quot; alt=&quot;Medium&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://bovard.github.io/articles/battle_code_2011/turret2.png&quot; alt=&quot;Turret&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://bovard.github.io/articles/battle_code_2011/armory2.png&quot; alt=&quot;Armory&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://bovard.github.io/articles/battle_code_2011/building2.png&quot; alt=&quot;Building&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://bovard.github.io/articles/battle_code_2011/dummy2.png&quot; alt=&quot;Dummy&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://bovard.github.io/articles/battle_code_2011/factory2.png&quot; alt=&quot;Factory&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://bovard.github.io/articles/battle_code_2011/recycler2.png&quot; alt=&quot;Recycler&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6 id=&quot;a-selection-of-buildings-and-units-from-2012&quot;&gt;A selection of buildings and units from 2012&lt;/h6&gt;
&lt;p&gt;This year’s unique challenge was modular robots. To start with you chose a chassis
(heavy, medium, light, or flying). By default each chassis could sense obstacles 1 square in
each direction, receive messages, and carry a specified weight of components.
These components were broken into 4 categories: builders, sensors, weapons and communication.&lt;/p&gt;
&lt;p&gt;You can read more about the details of the contest on the winning team’s &lt;a href=&quot;http://blog.stevearc.com/2011/12/17/battlecode-postmortem.html&quot;&gt;post-mortem blog post&lt;/a&gt;.
But lets just say the winning strategy involved heavy chassis with a teleport component, a hammer and a mountain of armor.&lt;/p&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;p&gt;Being a fresh graduate of a Java-based undergraduate program I did the first
thing that came to mind: misuse the #*%&amp;amp; out of inheritance.&lt;/p&gt;
&lt;p&gt;What happened next was a Daily WTF-worthy inheritance tree:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RobotSystem
  ^-SensorRobotSystem
    ^-BuilderSensorRobotSystem
      ^-WeaponBuilderSensorRobotSystem
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not only does a WeaponBuilderSensorRobotSystem never build anything but also sometimes they don’t have a sensor!
As the competition entered its final week I learned just how painful major refactors
are when the function you are calling could be in one of four files (or all four)! You can check out the code on my &lt;a href=&quot;https://github.com/bovard/robo-rumble&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Walking away from this I learned first-hand the perils of ignoring the &lt;code&gt;composition over inheritance&lt;/code&gt; mantra.&lt;/p&gt;
&lt;h4 id=&quot;results&quot;&gt;Results&lt;/h4&gt;
&lt;p&gt;I placed about the middle of the pack overall but I was the 2nd place non-MIT team.&lt;/p&gt;
&lt;h6 id=&quot;written-03-22-2014&quot;&gt;Written 03/22/2014&lt;/h6&gt;
</description>
    </item>
    <item>
      <title>Planet Wars</title>
      <link>http://bovard.github.io/articles/google_ai_challenge_2010/</link>
      <pubDate>Mon, 01 Nov 2010 15:00:00 -0600</pubDate>
      <guid isPermaLink="true">http://bovard.github.io/articles/google_ai_challenge_2010/</guid>
      <author></author>
      <description>&lt;p&gt;In which I discover python and kick butt.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://planetwars.aichallenge.org/&quot;&gt;Planet Wars&lt;/a&gt; was the 3rd of a &lt;a href=&quot;http://aichallenge.org/&quot;&gt;series&lt;/a&gt;
of AI programming competitions organized by the University of Waterloo Computer
Science Club and sponsored by Google.
This was the first time programming really clicked for me!
Unfortunately they’ve stopped hosting competitions but I’ll always look back on it fondly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bovard.github.io/articles/google_ai_challenge_2010/PlanetWars.png&quot; alt=&quot;Plant Wars&quot;&gt;&lt;/p&gt;
&lt;p&gt;In planet wars competitors must command fleets of ships around a small planetary system.
Any planets you own create ships for you at a rate proportional to their size.
Neutral (grey) planets don’t create ships until they’ve been captured by either side.
This simple game play mechanic lead to some really interesting things!&lt;/p&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;p&gt;My first foray into python and boy is it ugly! Looking at is now I’m really surprised I did well.
I guess hard work and enthusiasm count for a lot. If really want to take a look you can find the code
&lt;a href=&quot;https://github.com/bovard/planet-wars&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the most interesting things I did was implement the ant colony optimization and
artificial bee colony algorithms. Ultimately I didn’t end up using these as they didn’t
perform that well when a single ship could make the difference between victory and defeat.&lt;/p&gt;
&lt;h4 id=&quot;results&quot;&gt;Results&lt;/h4&gt;
&lt;p&gt;I came in &lt;a href=&quot;http://planetwars.aichallenge.org/profile.php?user_id=8475&quot;&gt;79th&lt;/a&gt; out of 4600 working entries.&lt;/p&gt;
&lt;h6 id=&quot;written-03-20-2014&quot;&gt;Written 03/20/2014&lt;/h6&gt;
</description>
    </item>
  </channel>
</rss>