<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bovard's List</title>
    <atom:link href="https://bovard.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>https://bovard.github.io</link>
    <description>Projects I've (nearly) finished</description>
    <pubDate>Mon, 21 Mar 2016 15:00:00 +0000</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Rogue AI Dungeon</title>
      <link>https://bovard.github.io/articles/rogue_ai_dungeon/</link>
      <pubDate>Mon, 21 Mar 2016 15:00:00 +0000</pubDate>
      <guid isPermaLink="true">https://bovard.github.io/articles/rogue_ai_dungeon/</guid>
      <author>Bovard Doerschuk-Tiberi</author>
      <description>&lt;p&gt;In which I create an AI challenge&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;
&lt;p&gt;The Seven Day Roguelike challenge (&lt;a href=&quot;http://www.roguebasin.com/index.php?title=Seven_Day_Roguelike_Challenge&quot;&gt;7DRL&lt;/a&gt;) has been an annual competition since around 2005. The premise is simple: create a roguelike game in seven days! &lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Roguelike&quot;&gt;wikipedia&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Roguelike is a subgenre of role-playing video games characterized by a dungeon crawl through procedurally generated game levels, turn-based gameplay, tile-based graphics, and permanent death of the player-character.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I had participated in the 7DRL 2014 challenge, creating &lt;a href=&quot;https://bovard.github.io/articles/rgb/&quot;&gt;RGB&lt;/a&gt; with a friend. This year I was back with a team of four and we were ready to take on a bit more.&lt;/p&gt;
&lt;p&gt;I had been mulling around the idea for a while of making a single-player &lt;a href=&quot;https://bovard.github.io/articles/battle_code_2013/&quot;&gt;battlecode&lt;/a&gt;-ish challenge. A lot of complexity in battlecode is around messaging a coordination. I figured that if you just controlled one unit you could drop a lot of the complexity. It might also serve as a good starter for students interested in participating in battlecode.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/rogue_ai_dungeon/splash.png&quot; alt=&quot;RAID&quot;&gt;
&lt;em&gt;RAID’s splash screen, courtesy of Raph&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We were able to complete (most) everything in a week and called it RAID - Rogue AI Dungeon. The purpose of the game is to program an AI to play the game for you. You’ll notice significantly more polish and depth than in RGB. If you’re interested in battlecode or learning javascript, &lt;a href=&quot;http://bovard.github.io/raid/&quot;&gt;give it a whirl&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/rogue_ai_dungeon/play.png&quot; alt=&quot;Gameplay&quot;&gt;
&lt;em&gt;The dreaded orc level!&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;p&gt;The first few days of the project I spend duplicating (and adding to) the &lt;a href=&quot;http://www.battlecode.org/&quot;&gt;battlecode api&lt;/a&gt;. We then spent a while on a tutorial which takes you up from the really dumb default player:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RaidPlayer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;playerController&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pc = playerController;
}

RaidPlayer.prototype = {
  &lt;span class=&quot;attr&quot;&gt;act&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; direction = Direction.randomDirection();
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pc.canMove(direction)) {
      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pc.move(direction);
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
    }
  }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;through most of the basic API functionality including:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;senseDirectionToExit();
canMove(direction);
canMeleeAttack(location);
meleeAttack(location);
canMagicAttack(location);
magicAttack(location);
canRangedAttack(location);
rangedAttack(location);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I replicated many of the battlecode &lt;a href=&quot;https://github.com/bovard/raid/tree/master/lib/GameObjects&quot;&gt;game objects&lt;/a&gt; such as &lt;a href=&quot;https://github.com/bovard/raid/blob/master/lib/GameObjects/Direction.js&quot;&gt;Direction&lt;/a&gt; and &lt;a href=&quot;https://github.com/bovard/raid/blob/master/lib/GameObjects/MapLocation.js&quot;&gt;MapLocation&lt;/a&gt; and in general things should look very familiar to battlecode veterans. You can find all the code on &lt;a href=&quot;https://github.com/bovard/raid&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Learning from the past mistakes of RGB, we really did make an effort to separate concerns and I think it turned out quite nicely. We have a sweet canvas renderer that even has animations and were able to program quite a few different behaviors for monsters. As you progress through the levels enemies getting faster, stronger and smarter. &lt;/p&gt;
&lt;p&gt;We also implemented somewhat robust analytics this year so I can tell you that no one has made it past level 11 (of a possible 40). We probably have a few balance issues to work out, but with over 10 AIs playing nearly 50 creep types that’s to be expected. Hopefully I’ll be able to spend some time balancing on a later date.&lt;/p&gt;
&lt;h4 id=&quot;results&quot;&gt;Results&lt;/h4&gt;
&lt;p&gt;RAID was a success in 7DRL, earning a &lt;a href=&quot;http://7drl.roguetemple.com/Reviews&quot;&gt;1.9&lt;/a&gt; (out of 3) from our reviewers, Winter Wolf and Tiger (big thank you!). Tiger writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“This is a game for a programmers only. Luckily, I am a programmer and many of the roguelike players too. In the game, you must write a JavaScript function that controls player so he can reach from one corner of screen to opposite. You can use three different attacks (melee, ranged and magical) to kill several types of monsters,  heal yourself, check a tiles and units around you and move in 8 directions. Early levels are pretty dull, so even A* would be a huge overkill here, simple moving to an exit and snippets copied from tutorial about “if you can hit with magic, do it” are enough to pass first 5 levels. Well, later on levels gets harder and perhaps better tactical AI or at least magic instead of melee could have helped against jackals pack right at start. But testing it would be a pain because you must pass all the levels from first after each failure and it takes about 15 minutes at maximum speed. And if we speak about pathfinding, i don’t think i’m in a mood to recreate an a*\wave algorithm in javascript for now. But i’ll try to do it later.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thanks to a little bit of shameless self-promotion on reddit, we had over 3000 sessions in the first week after release! I had certainly never dreamed of such a reception and I was blown away. Some people even contacted us with suggestions and made pull requests to fix some of our bugs! If you want to chat about the game, you can come find us in our &lt;a href=&quot;https://gitter.im/bovard/raid&quot;&gt;gitter channel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overall I couldn’t have been happier with the result. Hope you enjoy!&lt;/p&gt;
&lt;h6 id=&quot;written-05-24-2016&quot;&gt;Written 05/24/2016&lt;/h6&gt;
</description>
    </item>
    <item>
      <title>RGB</title>
      <link>https://bovard.github.io/articles/rgb/</link>
      <pubDate>Thu, 20 Mar 2014 15:00:00 +0000</pubDate>
      <guid isPermaLink="true">https://bovard.github.io/articles/rgb/</guid>
      <author>Bovard Doerschuk-Tiberi</author>
      <description>&lt;p&gt;In which I finish my first game&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;
&lt;p&gt;The Seven Day Roguelike challenge (&lt;a href=&quot;http://www.roguebasin.com/index.php?title=Seven_Day_Roguelike_Challenge&quot;&gt;7DRL&lt;/a&gt;) has been an annual competition since around 2005. The premise is simple: create a roguelike game in seven days! &lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Roguelike&quot;&gt;wikipedia&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Roguelike is a subgenre of role-playing video games characterized by a dungeon crawl through procedurally generated game levels, turn-based gameplay, tile-based graphics, and permanent death of the player-character.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I, like many developers before me, have a long history of half-started games stretching back to middle school (our half-finished Pokemon clone on the TI-83+ was legendary) so the concept of actually finishing something was very appealing to me. I teamed up with a friend and we were off!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/rgb/rgb.png&quot; alt=&quot;RGB&quot;&gt;
&lt;em&gt;Gotta love those rats&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our idea was somewhat simple: create a simple dungeon crawler in which you could shift between three dimensions (red, green, blue - hence the name of the game). Initially we were thinking you could gain experience in a dimension for staying in it longer but in the end we made it so that each dimension had its own “special move”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/rgb/green.png&quot; alt=&quot;red&quot;&gt;
&lt;em&gt;Our helpful hint to switch dimensions&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It’s not the most beautiful or robust (there is a still a bug when going to the next level that I haven’t figured out yet) game in the world, but we made it in seven days! From scratch. Take a &lt;a href=&quot;http://bovard.github.io/rgb/&quot;&gt;crack at it now&lt;/a&gt;! If you get to level 10, consider yourself an RGB champion.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/rgb/green2.png&quot; alt=&quot;green&quot;&gt;
&lt;em&gt;You’re green!&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;p&gt;RGB is played in your browser and uses a combination of html element and canvas to render. We wrote everything from scratch, including the game engine, which was quite the learning experience. You can view the code &lt;a href=&quot;https://github.com/bovard/rgb&quot;&gt;on github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The encapsulation wasn’t the best, &lt;a href=&quot;https://github.com/bovard/rgb/blob/master/src/Game.js&quot;&gt;Game.js&lt;/a&gt; touches rendering, creep ai, input, game logic, and display but I think it was pretty decent for seven days of work.&lt;/p&gt;
&lt;p&gt;Perhaps some of the most gnarly code came when we implemented &lt;a href=&quot;https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&quot;&gt;Dijkstra’s algorithm&lt;/a&gt; to help our creeps move a little more intelligently. You can see our very simplistic creep ai here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    takeCreepTurn: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;creepController, dijk, closeQuartersDijk&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;comment&quot;&gt;// attack logic if we are in this dimension&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (creepController.isAdjacentToHero()) {
            creepController.attackHero();
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(creepController.aggroHero()) {
            &lt;span class=&quot;comment&quot;&gt;// Prioritize closeQuartersDijk if it has information&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; next = closeQuartersDijk.getNextTile(creepController.getCharacter().getLocation());
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!next) {
                next = dijk.getNextTile(creepController.getCharacter().getLocation());
                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (next)
                    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Dikj is telling me to go to&quot;&lt;/span&gt;, next.toString(), &lt;span class=&quot;string&quot;&gt;'from'&lt;/span&gt;, creepController.getCharacter().getLocation().toString());
            }
            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (next)
                    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;closeQtrDikj is telling me to go to&quot;&lt;/span&gt;, next.toString(), &lt;span class=&quot;string&quot;&gt;'from'&lt;/span&gt;, creepController.getCharacter().getLocation().toString());
            }
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (next) {
                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dir = creepController.getCharacter().getLocation().directionTo(next);
                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (creepController.canMove(dir)) {
                    creepController.move(dir);
                } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                    &lt;span class=&quot;comment&quot;&gt;// Dijkstra should never tell the creep to move where it can't BUT just in case it does&lt;/span&gt;
                    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.doBestAdjacentMove(creepController);
                }
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.doBestAdjacentMove(creepController);
            }
        }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see we borrowed heavily from &lt;a href=&quot;http://www.battlecode.org/&quot;&gt;battlecode’s api&lt;/a&gt; with &lt;code&gt;creepController&lt;/code&gt; and &lt;code&gt;canMove&lt;/code&gt;. Had I actually made a &lt;code&gt;creepPlayer&lt;/code&gt; things might have been much cleaner (and different creeps could have different ai / behaviors).&lt;/p&gt;
&lt;h4 id=&quot;results&quot;&gt;Results&lt;/h4&gt;
&lt;p&gt;RGB was a success (by 7DRL standards)! We were even featured as the &lt;a href=&quot;https://www.reddit.com/r/roguelikes/comments/216bwe/7drl_of_the_day_day_7_rgb/&quot;&gt;7DRL of the Day&lt;/a&gt; on reddit and was reviewed a couple times in the &lt;a href=&quot;http://7drl.roguetemple.com/Reviews&quot;&gt;7DRL Reviews&lt;/a&gt; (thanks to Jabberwock and Yeti for taking the time!) and given an overall score of 2.2 (out of 3)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“RGB is a browser roguelike with an interesting multi-dimensional mechanic. Red Green and Blue all operate as separate dimensions of the same dungeon. After the first three levels, where switching is mostly useless and/or instant death, the mechanic becomes very interesting! You can only attach enemies in your same dimension, but you can use other dimensions to escape. The level colors are a bit over-bearing but the dimension switching is cool!” - Yeti&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over the years RGB has seen surprisingly more play than I expected. I’m not sure who was playing everyday in the summer of 2015, but whoever you are, I salute you! We’ve had players from 48 states (North Dakota and Alaska, looking at you) and there have been close to 4000 sessions in the two years since.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/rgb/analytics.png&quot; alt=&quot;Analytics&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;written-05-24-2016&quot;&gt;Written 05/24/2016&lt;/h6&gt;
</description>
    </item>
    <item>
      <title>Archon</title>
      <link>https://bovard.github.io/articles/archon/</link>
      <pubDate>Tue, 14 Jan 2014 15:00:00 +0000</pubDate>
      <guid isPermaLink="true">https://bovard.github.io/articles/archon/</guid>
      <author>Bovard Doerschuk-Tiberi</author>
      <description>&lt;p&gt;In which I create my first npm package&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://battlecode.org/&quot;&gt;Battle Code&lt;/a&gt; is a yearly competition hosted by MIT.
Competitors design an AI to control robots to lead them to battle on the virtual battlefield!&lt;/p&gt;
&lt;p&gt;After the first week of BattleCode most teams run into the same problem: over optimization.
By this I mean teams will watch themselves lose a match because they did &lt;code&gt;x&lt;/code&gt; then
spend the next couple hours changing &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt; only to learn that doing &lt;code&gt;x&lt;/code&gt; actually
helped their bot win 9/10 times.&lt;/p&gt;
&lt;p&gt;How can teams test against this? The immediate thing that comes to mind is to create
a few local test bots that have a variety of basic strategies implemented and test
your new changes against that set of bots on all the maps.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://bovard.github.io/articles/archon/articles/battle_code_2013/&quot;&gt;2013&lt;/a&gt; we did this by hand and in 2014 I was determined
to provide a much more elegant solution to this problem.&lt;/p&gt;
&lt;p&gt;Introducing: &lt;a href=&quot;https://bovard.github.io/articles/archon/npmjs.org/package/archon&quot;&gt;archon&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Want to run all your bots against all other bots on all the maps?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;archon -m -t&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Want to run your submission against all other submissions on all the maps?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;archon -o teams/newSub -m -t&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What’s more all of those matches will be saved by default in the replays/ directory. You can queue
up to watch all the games locally with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;archon watch replays/&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;p&gt;Archon was my first substantial hobby project in pure node.js and I don’t think
I fully took advantage of things like Promises which would have made my life
a lot easier.&lt;/p&gt;
&lt;p&gt;Basically archon writes to the Battle Code engine’s config file called bc.conf:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Match server settings
bc.server.throttle=yield
bc.server.throttle-count=50

# Game engine settings
bc.engine.debug-methods=false
bc.engine.silence-a=false
bc.engine.silence-b=false
bc.engine.gc=false
bc.engine.gc-rounds=50
bc.engine.upkeep=true
bc.engine.breakpoints=false
bc.engine.bytecodes-used=true

# Client settings
bc.client.opengl=false
bc.client.use-models=true
bc.client.renderprefs2d=
bc.client.renderprefs3d=
bc.client.sound-on=true
bc.client.check-updates=false
bc.client.viewer-delay=50

# Headless settings - for &amp;quot;ant file&amp;quot;
bc.game.maps=adobe
bc.game.team-a=teleportingplayer
bc.game.team-b=teleportingplayer
bc.server.save-file=match.rms

# Transcriber settings
bc.server.transcribe-input=matches\\match.rms
bc.server.transcribe-output=matches\\transcribed.txt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After we set &lt;code&gt;bc.game.team-a&lt;/code&gt;, &lt;code&gt;bc.game.team-b&lt;/code&gt;, &lt;code&gt;bc.game.maps&lt;/code&gt; and a few other
settings we shell out &lt;code&gt;ant file&lt;/code&gt; and listen to the results.&lt;/p&gt;
&lt;p&gt;I think at this point I’m getting all I can out of my currently sloppy implementation,
if I were to have a bunch of features to add I’d probably redo a few things using
promises.&lt;/p&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/bovard/archon&quot;&gt;code&lt;/a&gt; on my github. Feel free
to open an issue request or (better) a PR if you have something that you’d like to add.&lt;/p&gt;
&lt;h4 id=&quot;results&quot;&gt;Results&lt;/h4&gt;
&lt;p&gt;Archon has so far been a success. At the time of this writing it has 448 downloads
in the past month!&lt;/p&gt;
&lt;h6 id=&quot;written-09-26-2014&quot;&gt;Written 09/26/2014&lt;/h6&gt;
</description>
    </item>
    <item>
      <title>BattleCode 2013</title>
      <link>https://bovard.github.io/articles/battle_code_2013/</link>
      <pubDate>Fri, 01 Feb 2013 15:00:00 +0000</pubDate>
      <guid isPermaLink="true">https://bovard.github.io/articles/battle_code_2013/</guid>
      <author>Bovard Doerschuk-Tiberi</author>
      <description>&lt;p&gt;In which we win great victories.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://battlecode.org/&quot;&gt;Battle Code&lt;/a&gt; is a yearly competition hosted by MIT.
Competitors design an AI to control robots to lead them to battle on the virtual battlefield!
Each robot is running on a separate thread so communication between bots is limited.&lt;/p&gt;
&lt;p&gt;After not getting around to writing an entry for 2012 I was a bit ambivalent about
participating in 2013 but after it was clear that I had a good team that was actually
going to contribute, I was in!&lt;/p&gt;
&lt;p&gt;This year’s challenge involved a rock, paper, scissors-like strategies: nuke, rush and econ.
Each player started out with a base that could spend time doing one of two things: spawning
soldiers (took 8 turns) or doing research (anywhere from 100 - 400 turns). Every soldier was the same and they could find special
‘encampment’ squares and transform themselves into one of the encampment types
(artillery, generators, power supply, med base or shield). The game ended when your soldiers
destroyed the enemy hq or you were able to research nuke (took about 400 rounds).&lt;/p&gt;
&lt;p&gt;The rush strategy was basically that, rushing your soldiers over to the enemy hq! The two bases were separated
by at least 50 rounds (or so) of navigation. Which meant that you could spawn a soldier
and by the timeit got to the enemy base it would be 2v1. That’s assuming that the
enemy didn’t spawn any encampments (which is usually a good bet that they did). The rush
was incredibly powerful in the first week due in part to its lower barrier of entry
and limited scope.&lt;/p&gt;
&lt;p&gt;The nuke strategy was also pretty straight-forward: build a nuke. There was a lot of subtle
variations on this: how many soldiers should I build? should I only build if there
is an artillery spot near my base? only if I’m in a corner? etc…&lt;/p&gt;
&lt;p&gt;Finally there was the econ strategy. For every generator and power supply you built you were able
to build soldiers faster and support more soldiers (respectively). In the econ strat
you invested to varying degrees in econ in hope of overwhelming the enemy late-game.&lt;/p&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;p&gt;For our main logic structure for the bots we used something called a decision tree.
Basically we created a tree structure in which every node had a pre/post condition and
an action. Additionally there were selector nodes, which would select a child action
to run based on the environment. The loop ran something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;observe_environment()
choose_action_from_tree()
execute_action()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allowed up to build up several different trees to rapidly build out different
soldier roles that could be easily composed and switched. Here’s a list of the more interesting
roles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Backdoor soldier (run around the edges of the map to attack from behind)&lt;/li&gt;
&lt;li&gt;Encampment hunter (checks enemy encampment spots while avoiding combat)&lt;/li&gt;
&lt;li&gt;Miner (laid mines around the base)&lt;/li&gt;
&lt;li&gt;Defender (defended the hq)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/bovard/BC2013&quot;&gt;code&lt;/a&gt; on my github.&lt;/p&gt;
&lt;h4 id=&quot;results&quot;&gt;Results&lt;/h4&gt;
&lt;p&gt;We ended up going to the finals at MIT! but lost out (0-2) while there giving us
somewhere in 9th-16th place.&lt;/p&gt;
&lt;h6 id=&quot;written-05-05-2014&quot;&gt;Written 05/05/2014&lt;/h6&gt;
</description>
    </item>
    <item>
      <title>BattleCode 2011</title>
      <link>https://bovard.github.io/articles/battle_code_2011/</link>
      <pubDate>Sat, 05 Feb 2011 15:00:00 +0000</pubDate>
      <guid isPermaLink="true">https://bovard.github.io/articles/battle_code_2011/</guid>
      <author>Bovard Doerschuk-Tiberi</author>
      <description>&lt;p&gt;In which I abuse inheritance. Heavily.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://battlecode.org/&quot;&gt;Battle Code&lt;/a&gt; is a yearly competition hosted by MIT.
Competitors design an AI to control robots to lead them to battle on the virtual battlefield!
Each robot is running on a separate thread so communication between bots is limited.&lt;/p&gt;
&lt;p&gt;Fresh from my win in the Google AI Challenge, I recruited a team from there to head over
and do Battle Code. Unfortunately none of them wrote a line of code.
This dampened my spirits but I was ready to push forward!&lt;/p&gt;
&lt;p&gt;|  |  |
| —– | —– | —– |
| &lt;img src=&quot;/articles/battle_code_2011/flying2.png&quot; alt=&quot;Flying&quot;&gt;  | &lt;img src=&quot;/articles/battle_code_2011/light1.png&quot; alt=&quot;Light&quot;&gt; | &lt;img src=&quot;/articles/battle_code_2011/medium2.png&quot; alt=&quot;Medium&quot;&gt; | &lt;img src=&quot;/articles/battle_code_2011/turret2.png&quot; alt=&quot;Turret&quot;&gt; | &lt;img src=&quot;/articles/battle_code_2011/armory2.png&quot; alt=&quot;Armory&quot;&gt; |  &lt;img src=&quot;/articles/battle_code_2011/building2.png&quot; alt=&quot;Building&quot;&gt; |  &lt;img src=&quot;/articles/battle_code_2011/dummy2.png&quot; alt=&quot;Dummy&quot;&gt; | &lt;img src=&quot;/articles/battle_code_2011/factory2.png&quot; alt=&quot;Factory&quot;&gt; | &lt;img src=&quot;/articles/battle_code_2011/recycler2.png&quot; alt=&quot;Recycler&quot;&gt; |&lt;/p&gt;
&lt;p&gt;######A selection of buildings and units from 2012&lt;/p&gt;
&lt;p&gt;This year’s unique challenge was modular robots. To start with you chose a chassis
(heavy, medium, light, or flying). By default each chassis could sense obstacles 1 square in
each direction, receive messages, and carry a specified weight of components.
These components were broken into 4 categories: builders, sensors, weapons and communication.&lt;/p&gt;
&lt;p&gt;You can read more about the details of the contest on the winning team’s &lt;a href=&quot;http://blog.stevearc.com/2011/12/17/battlecode-postmortem.html&quot;&gt;post-mortem blog post&lt;/a&gt;.
But lets just say the winning strategy involved heavy chassis with a teleport component, a hammer and a mountain of armor.&lt;/p&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;p&gt;Being a fresh graduate of a Java-based undergraduate program I did the first
thing that came to mind: misuse the #*%&amp;amp; out of inheritance.&lt;/p&gt;
&lt;p&gt;What happened next was a Daily WTF-worthy inheritance tree:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RobotSystem
  ^-SensorRobotSystem
    ^-BuilderSensorRobotSystem
      ^-WeaponBuilderSensorRobotSystem&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not only does a WeaponBuilderSensorRobotSystem never build anything but also sometimes they don’t have a sensor!
As the competition entered its final week I learned just how painful major refactors
are when the function you are calling could be in one of four files (or all four)! You can check out the code on my &lt;a href=&quot;https://github.com/bovard/robo-rumble&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Walking away from this I learned first-hand the perils of ignoring the &lt;code&gt;composition over inheritance&lt;/code&gt; mantra.&lt;/p&gt;
&lt;h4 id=&quot;results&quot;&gt;Results&lt;/h4&gt;
&lt;p&gt;I placed about the middle of the pack overall but I was the 2nd place non-MIT team.&lt;/p&gt;
&lt;h6 id=&quot;written-03-22-2014&quot;&gt;Written 03/22/2014&lt;/h6&gt;
</description>
    </item>
    <item>
      <title>Planet Wars</title>
      <link>https://bovard.github.io/articles/google_ai_challenge_2010/</link>
      <pubDate>Mon, 01 Nov 2010 15:00:00 +0000</pubDate>
      <guid isPermaLink="true">https://bovard.github.io/articles/google_ai_challenge_2010/</guid>
      <author>Bovard Doerschuk-Tiberi</author>
      <description>&lt;p&gt;In which I discover python and kick butt.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://planetwars.aichallenge.org/&quot;&gt;Planet Wars&lt;/a&gt; was the 3rd of a &lt;a href=&quot;http://aichallenge.org/&quot;&gt;series&lt;/a&gt;
of AI programming competitions organized by the University of Waterloo Computer
Science Club and sponsored by Google.
This was the first time programming really clicked for me!
Unfortunately they’ve stopped hosting competitions but I’ll always look back on it fondly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/google_ai_challenge_2010/PlanetWars.png&quot; alt=&quot;Plant Wars&quot;&gt;&lt;/p&gt;
&lt;p&gt;In planet wars competitors must command fleets of ships around a small planetary system.
Any planets you own create ships for you at a rate proportional to their size.
Neutral (grey) planets don’t create ships until they’ve been captured by either side.
This simple game play mechanic lead to some really interesting things!&lt;/p&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;p&gt;My first foray into python and boy is it ugly! Looking at is now I’m really surprised I did well.
I guess hard work and enthusiasm count for a lot. If really want to take a look you can find the code
&lt;a href=&quot;https://github.com/bovard/planet-wars&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the most interesting things I did was implement the ant colony optimization and
artificial bee colony algorithms. Ultimately I didn’t end up using these as they didn’t
perform that well when a single ship could make the difference between victory and defeat.&lt;/p&gt;
&lt;h4 id=&quot;results&quot;&gt;Results&lt;/h4&gt;
&lt;p&gt;I came in &lt;a href=&quot;http://planetwars.aichallenge.org/profile.php?user_id=8475&quot;&gt;79th&lt;/a&gt; out of 4600 working entries.&lt;/p&gt;
&lt;h6 id=&quot;written-03-20-2014&quot;&gt;Written 03/20/2014&lt;/h6&gt;
</description>
    </item>
  </channel>
</rss>